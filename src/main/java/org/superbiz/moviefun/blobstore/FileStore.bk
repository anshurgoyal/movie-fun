package org.superbiz.moviefun.blobstore;

import com.amazonaws.util.IOUtils;
import org.apache.tika.Tika;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;
import static java.nio.file.Files.readAllBytes;

import static java.lang.ClassLoader.getSystemResource;
import static java.lang.String.format;

public class FileStore implements BlobStore {

    @Override
    public void put(Blob blob) throws IOException {
        saveUploadToFile(blob);
    }

    @Override
    public Optional<Blob> get(String name) throws IOException {

        try{
            Path coverFilePath = getExistingCoverPath(Long.parseLong(name));
            byte[] imageBytes = readAllBytes(coverFilePath);
            HttpHeaders headers = createImageHttpHeaders(coverFilePath, imageBytes);

            Blob blob= new Blob(name, new ByteArrayInputStream(imageBytes), headers.getContentType().toString());

            return Optional.of(blob);
        }catch(IOException ex){
            throw ex;
        }catch(Exception e){
            e.printStackTrace();
        }
        return Optional.empty();
    }

    @Override
    public void deleteAll() {
        // ...
    }

    private void saveUploadToFile(Blob blob) throws IOException {
        File targetFile = getCoverFile(Integer.parseInt(blob.name));
        System.out.println("Name::"+blob.name);
//        targetFile.delete();
        targetFile.getParentFile().mkdirs();
        targetFile.createNewFile();

        try (FileOutputStream outputStream = new FileOutputStream(targetFile)) {
            outputStream.write(IOUtils.toByteArray(blob.inputStream));
        }
    }

    private HttpHeaders createImageHttpHeaders(Path coverFilePath, byte[] imageBytes) throws IOException {
        String contentType = new Tika().detect(coverFilePath);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.parseMediaType(contentType));
        headers.setContentLength(imageBytes.length);
        return headers;
    }

    private File getCoverFile(long albumId) {
        String coverFileName = format("covers/%d", albumId);
        return new File(coverFileName);
    }
    private Path getExistingCoverPath(long albumId) throws URISyntaxException {
        File coverFile = getCoverFile(albumId);
        Path coverFilePath;

        if (coverFile.exists()) {
            coverFilePath = coverFile.toPath();
        } else {
            coverFilePath = Paths.get(getSystemResource("default-cover.jpg").toURI());
        }

        return coverFilePath;
    }
}